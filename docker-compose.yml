services:
  user-service:
    build: ./user-service
    container_name: user-service
    environment:
      DB_HOST: user-db
      DB_NAME: userdb
      DB_USER: user
      DB_PASSWORD: password
      PORT: 5000
      JWT_SECRET: yourSecret
    ports:
      - "5000:5000"
    depends_on:
      user-db:
        condition: service_healthy
    networks:
      - user_network

  task-service:
    build: ./task-service
    container_name: task-service
    environment:
      DB_HOST: task-db
      DB_PORT: 5432
      DB_NAME: taskdb
      DB_USER: task
      DB_PASSWORD: password
      PORT: 3000
    ports:
      - "3000:3000"
    depends_on:
      task-db:
        condition: service_healthy
    networks:
      - task_network

  frontend:
    build: ./frontend
    container_name: frontend
    ports:
      - "8080:80"
    networks:
      - frontend_network

  user-db:
    image: postgres:13-alpine
    container_name: user-db
    environment:
      POSTGRES_DB: userdb
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    volumes:
      - user-db-data:/var/lib/postgresql/data
    networks:
      - user_network
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "user", "-d", "userdb"]
      interval: 5s
      retries: 5
      start_period: 10s

  task-db:
    image: postgres:13-alpine
    container_name: task-db
    environment:
      POSTGRES_DB: taskdb
      POSTGRES_USER: task
      POSTGRES_PASSWORD: password
    volumes:
      - task-db-data:/var/lib/postgresql/data
    networks:
      - task_network
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "task", "-d", "taskdb"]
      interval: 5s
      retries: 5
      start_period: 10s

networks:
  user_network: {}
  task_network: {}
  frontend_network: {}

volumes:
  user-db-data: {}
  task-db-data: {}
